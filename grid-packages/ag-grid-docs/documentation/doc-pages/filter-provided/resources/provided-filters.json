{
    "filterParams": {
        "buttons": {
            "description": "Specifies the buttons to be shown in the filter, in the order they should be displayed in. The options are: <ul><li>`'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.</li><li>`'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.</li><li>`'reset'`: The Reset button will clear the details of the filter and any active filters on that column.</li><li>`'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.</li></ul>"
        },
        "closeOnApply": {
            "description": "If the Apply button is present, the filter popup will be closed immediately when the Apply or Reset button is clicked if this is set to `true`."
        },
        "debounceMs": {
            "description": "By default the <a href='../filter-text/'>Text</a> and <a href='../filter-number/'>Number</a> filters will debounce by 500ms. This is because these filters have text field inputs, so time is given to the user to type items in before the input is formatted and the filtering applied. The <a href='../filter-set/'>Set</a> and <a href='../filter-date/'>Date</a> will execute immediately (no debounce). To override these defaults, set `debounceMs` to the number of milliseconds to debounce by."
        },
        "newRowsAction": {
            "default": "clear",
            "description": "This property is for when using the <a href='../client-side-model/'>Client Side Row Model</a> only. When set to `'clear'`, updating the data in the grid by calling `api.setRowData()` (or updating the `rowData` property if bound by a framework) will clear (reset) the filter. If you instead set this to `'keep'`, the grid will keep its currently set filter when the data is updated."
        }
    },
    "api": {
        "getModelFromUi()": {
            "description": "Returns the filter model from the UI. If changes have been made to the UI but not yet applied, this model will reflect those changes."
        },
        "applyModel()": {
            "description": "Applies the model shown in the UI (so that `getModel()` will now return what was in the UI when `applyModel()` was called)."
        }
    }
}